SPACES : /[ \n]/+

%ignore SPACES

// Python re doesn't match "\n" by defect when using `.`
COMMENT_REST_OF_LINE: /#[^\n]*/

%ignore COMMENT_REST_OF_LINE

DIGIT:/[0-9]/

NON_ZERO_DIGIT:/[1-9]/

NON_ZERO_INT:NON_ZERO_DIGIT (DIGIT|"_")*

ZERO_INT:/0+(0|_)*/

INT: NON_ZERO_INT | ZERO_INT

UPPERCASES: /[A-Z]/

IDENTIFIER_CHARACTER:/[a-zA-Z_0-9]/

CAPITALIZED_IDENTIFIER : UPPERCASES IDENTIFIER_CHARACTER*

LOWERCASSE_IDENTIFIER_HEAD: /[a-z]/

VARIABLE_IDENTIFIER: LOWERCASSE_IDENTIFIER_HEAD IDENTIFIER_CHARACTER*

AT : "@"
HOLE: "_"
COLON:":"
DOUBLE_COLON.2:"::"
SEMI_COLON:";"
EQUAL:"="
LAMBDA:"\\"
PIPE : "|"
LET : "let"
IN : "in"
DOT : "."
COMMA:","
CASE:"case"
OF:"of"
FORALL:"forall"
DATA:"data"
TYPE:"type"
NEWTYPE:"newtype"
OPERATOR_KEYWORD:"operator"
MODULE:"module"
IMPORT:"import"
WHERE:"where"
TERM:"term"
AS:"as"
LEFT:"left"
RIGHT:"right"
NONE:"none"
UNQUALIFIED:"unqualified"


%declare LAYOUT_START
%declare LAYOUT_SEPARATOR
%declare LAYOUT_END


// The arrows can be captured by the OPERATOR if we don't put a priority here.
RIGHT_ARROW.2:"->"
LEFT_ARROW.2:"<-"

LPAREN:"("
RPAREN:")"


LBRACE:"{"
RBRACE:"}"

LBRACKET:"["
RBRACKET:"]"


OPERATOR_ALONE_CHARACTER : "+" | "-" | "~" | "/" | "!" | "?" 
  | "¡" | "¿" | "$" | "¬" | ">" | "<" | "%" | "&" | "*"

OPERATOR_NOT_ALONE_CHARACTER: EQUAL | LAMBDA | PIPE

// The "=" symbol alone is interpreted as "EQUAL" but if it's part of an operator
// like the case of ">=" or "<=" then we need to interpret it as operator.
// This also happens when with "\\" for the lambda expression
OPERATOR.1: OPERATOR_ALONE_CHARACTER (OPERATOR_NOT_ALONE_CHARACTER | OPERATOR_ALONE_CHARACTER)*
  | OPERATOR_NOT_ALONE_CHARACTER (OPERATOR_NOT_ALONE_CHARACTER | OPERATOR_ALONE_CHARACTER)+

INFIX_IDENTIFIER : "`" (VARIABLE_IDENTIFIER | CAPITALIZED_IDENTIFIER | PREFIXED_CAPITALIZED | PREFIXED_VARIABLE) "`"

MODULE_PREFIX.4: (CAPITALIZED_IDENTIFIER ".")+

PREFIXED_OPERATOR.2 : MODULE_PREFIX OPERATOR

PREFIXED_VARIABLE.2 : MODULE_PREFIX VARIABLE_IDENTIFIER

PREFIXED_CAPITALIZED : MODULE_PREFIX CAPITALIZED_IDENTIFIER

SELECTOR_PAREN.2 : ")."

SELECTOR_RPAREN_DOT_VARIABLES.2: SELECTOR_PAREN VARIABLE_IDENTIFIER (DOT VARIABLE_IDENTIFIER)*

//TODO: add tokens for the case "a.b"
SELECTOR_DOT_PREFIXED.3 : (PREFIXED_VARIABLE) (DOT VARIABLE_IDENTIFIER)+

SELECTOR_DOT_VARIABLE.3 : VARIABLE_IDENTIFIER (DOT VARIABLE_IDENTIFIER)+


// --------------------- Combinators  ---------------------

parens{p}: LPAREN p RPAREN
braces{p}: LBRACE p RBRACE
brackets{p}: LBRACKET p RBRACKET

sep_by1{p,sep}: p [(sep p)+]


// --------------------- Expressions  ---------------------


expression_record_update_item : VARIABLE_IDENTIFIER EQUAL expression 

expression_record_update_inner : sep_by1{expression_record_update_item,COMMA}

expression_record_update :  braces{expression_record_update_inner}

expression_record_item : VARIABLE_IDENTIFIER COLON expression 
  // this enforces commas to be at the begining of the line, 
  // it's a happy accident :)
  | VARIABLE_IDENTIFIER COLON LAYOUT_START expression   LAYOUT_END -> expression_record_item_layout
  | VARIABLE_IDENTIFIER -> expression_record_item_single

expression_record_inner : sep_by1{expression_record_item,COMMA} 

expression_record : braces{expression_record_inner}

expression_operator : PREFIXED_OPERATOR 
  | OPERATOR 
  |INFIX_IDENTIFIER -> expression_operator_identifier

expression_operator_parens: parens{expression_operator}

expression_constructor : CAPITALIZED_IDENTIFIER | PREFIXED_CAPITALIZED

expression_variable : VARIABLE_IDENTIFIER | PREFIXED_VARIABLE

expression_annotation: expression 
  | expression COLON type_scheme -> expression_annotation_no_layout
  | expression COLON LAYOUT_START type_scheme LAYOUT_END -> expression_annotation_layout

// TODO: Ass strings
expression_literal : INT

expression_atom: expression_variable
  | expression_constructor
  | expression_literal
  | expression_record_update
  | expression_record
  | expression_operator_parens
//here we are hidding the return call to expression with parens
  | parens{expression_annotation}

expression_selector_parens : LPAREN expression SELECTOR_RPAREN_DOT_VARIABLES

expression_selector_prefixed : SELECTOR_DOT_PREFIXED

expression_selector_variable : SELECTOR_DOT_VARIABLE

expression_selector: expression_atom
  | expression_selector_prefixed
  | expression_selector_variable
  | expression_selector_parens

expression_type_arg : AT type_atom

expression_application: expression_selector (expression_selector | expression_type_arg)*

expression_operators: (expression_application expression_operator)* expression_application

expression_case_single : pattern_match RIGHT_ARROW expression
  | pattern_match RIGHT_ARROW  LAYOUT_START expression LAYOUT_END -> expression_case_single_layout

expression_case_cases : sep_by1{expression_case_single,LAYOUT_SEPARATOR}

expression_case: CASE expression OF expression_case_cases 
  | CASE LAYOUT_START expression LAYOUT_END OF expression_case_cases  -> expression_case_2
  | CASE expression OF LAYOUT_START expression_case_cases  LAYOUT_END -> expression_case_3
  | CASE LAYOUT_START expression LAYOUT_END OF LAYOUT_START expression_case_cases LAYOUT_END -> expression_case_4
  | expression_operators -> expression_case_operators

expression_lambda_arguments: pattern_match+

expression_lambda : LAMBDA expression_lambda_arguments RIGHT_ARROW expression
  | LAMBDA LAYOUT_START expression_lambda_arguments LAYOUT_END RIGHT_ARROW expression -> expression_lambda_2
  | LAMBDA expression_lambda_arguments RIGHT_ARROW LAYOUT_START expression LAYOUT_END -> expression_lambda_3
  | LAMBDA LAYOUT_START expression_lambda_arguments LAYOUT_END RIGHT_ARROW LAYOUT_START expression LAYOUT_END -> expression_lambda_4
  | expression_case -> expression_lambda_case

// TODO: Put more pattern_matches!
expression_let_binding: pattern_match EQUAL expression

expression_let_inside: sep_by1{expression_let_binding,LAYOUT_SEPARATOR}

expression_let: LET LAYOUT_START expression_let_inside LAYOUT_END IN LAYOUT_START expression LAYOUT_END 
  | LET LAYOUT_START expression_let_inside LAYOUT_END IN expression  -> expression_let_2
  // the use of expression_let_binding improves parser errors
  | LET expression_let_binding IN LAYOUT_START expression LAYOUT_END-> expression_let_3
  | LET expression_let_binding IN expression -> expression_let_4
  | expression_lambda -> expression_let_lambda

expression: expression_let

// --------------------- PatternMatch  ---------------------

pattern_match_constructor_identifier : CAPITALIZED_IDENTIFIER | PREFIXED_CAPITALIZED

pattern_match_variable: VARIABLE_IDENTIFIER

pattern_match_literal: INT

pattern_match_atom: pattern_match_literal| pattern_match_variable | pattern_match_constructor_identifier | parens{pattern_match}

pattern_match_constructor_application: pattern_match_constructor_identifier pattern_match_atom+
  | pattern_match_atom

pattern_match : pattern_match_constructor_application


pattern_match_function_args_atoms: pattern_match_atom+ 
// DEPRECATED: pattern_match_function_args_comes: (pattern_match COMMA )+ pattern_match


pattern_match_function_args: pattern_match_function_args_atoms 
// DEPRECATED: | pattern_match_function_args_comes

// --------------------- Data  ---------------------

data_type_constructor : CAPITALIZED_IDENTIFIER [sep_by1{type_expression_inner,COMMA}]

data_type_constructors: sep_by1{data_type_constructor, PIPE} 

data_pipes_layout : LAYOUT_SEPARATOR PIPE 

data_type_constructors_layout : sep_by1{data_type_constructors,data_pipes_layout}

// --------------------- Types  ---------------------


type_record_item : VARIABLE_IDENTIFIER COLON type_expression_inner
  // this enforces commas to be at the begining of the line, 
  // it's a happy accident :)
  | VARIABLE_IDENTIFIER COLON LAYOUT_START type_expression_inner LAYOUT_END -> type_record_item_layout

type_record_inner : sep_by1{type_record_item,COMMA}

type_record : braces{type_record_inner}

// Shall we allow `a `Either` b` to be `Either a b`?
type_operator : PREFIXED_OPERATOR | OPERATOR 

type_variable : VARIABLE_IDENTIFIER

type_concrete_type :CAPITALIZED_IDENTIFIER | PREFIXED_CAPITALIZED

type_atom : type_variable | type_concrete_type | parens{type_expression_inner} | type_record

type_application : type_atom+

type_operators : (type_application type_operator)* type_application


// made RIGHT_ARROW not to gen a layout here
type_expression_inner: sep_by1{type_operators,RIGHT_ARROW}

// This forces prenex form at syntax level
type_scheme :  type_expression_inner
  | FORALL type_data_type_args DOT type_expression_inner -> type_scheme_forall_no_layout
  | FORALL LAYOUT_START type_data_type_args_layout LAYOUT_END DOT type_expression_inner -> type_scheme_forall_layout


type_data_type_args : type_variable+

type_data_type_args_layout : (type_variable [LAYOUT_SEPARATOR])* type_variable


// --------------------- Modules ---------------------
import_constructor : CAPITALIZED_IDENTIFIER 

import_constructors : sep_by1{import_constructor,COMMA}

import_type : CAPITALIZED_IDENTIFIER [parens{import_constructors}]

import_function : VARIABLE_IDENTIFIER

import_operator :[TYPE] OPERATOR

module_import : import_type | import_function | import_operator

module_imports : sep_by1{module_import,COMMA}

export_constructor : CAPITALIZED_IDENTIFIER | PREFIXED_CAPITALIZED

export_constructors : sep_by1{export_constructor,COMMA}

export_type : (CAPITALIZED_IDENTIFIER| PREFIXED_CAPITALIZED) [parens{export_constructors}]

export_function : PREFIXED_VARIABLE | VARIABLE_IDENTIFIER

export_operator : [TYPE] (PREFIXED_OPERATOR | OPERATOR)

module_export : export_type | export_function | export_operator

module_exports : sep_by1{module_export,COMMA}

// --------------------- Top  ---------------------

top_variable_declaration: VARIABLE_IDENTIFIER COLON type_scheme
  |  VARIABLE_IDENTIFIER COLON LAYOUT_START type_scheme LAYOUT_END -> top_variable_declaration_layout

top_variable_definition: (OPERATOR | VARIABLE_IDENTIFIER) [pattern_match_function_args] EQUAL expression -> top_variable_definition
  | (OPERATOR | VARIABLE_IDENTIFIER) [pattern_match_function_args] EQUAL LAYOUT_START expression LAYOUT_END -> top_variable_definition_layout

top_data_type.2: DATA (CAPITALIZED_IDENTIFIER | OPERATOR) [type_data_type_args] EQUAL data_type_constructors
  | DATA (CAPITALIZED_IDENTIFIER | OPERATOR) [type_data_type_args] EQUAL LAYOUT_START data_type_constructors_layout LAYOUT_END

top_type_synonym : TYPE CAPITALIZED_IDENTIFIER [type_data_type_args] EQUAL type_expression_inner 
  | TYPE CAPITALIZED_IDENTIFIER [type_data_type_args] EQUAL LAYOUT_START type_expression_inner LAYOUT_END

top_type_new_type : NEWTYPE CAPITALIZED_IDENTIFIER [type_data_type_args] EQUAL data_type_constructor
  | NEWTYPE CAPITALIZED_IDENTIFIER [type_data_type_args] EQUAL LAYOUT_START data_type_constructor LAYOUT_END

top_operator_fixity : OPERATOR_KEYWORD OPERATOR (TYPE|TERM) INT (LEFT|RIGHT|NONE)

top_module : MODULE (PREFIXED_CAPITALIZED|CAPITALIZED_IDENTIFIER) [parens{module_exports}] WHERE

top_import : IMPORT PREFIXED_CAPITALIZED [parens{module_imports}] [ UNQUALIFIED | (AS (PREFIXED_CAPITALIZED | CAPITALIZED_IDENTIFIER))]

top_imports : top_import+

top: top_module [top_imports] (top_variable_definition | top_variable_declaration | top_data_type | top_type_synonym | top_type_new_type | top_operator_fixity)*
